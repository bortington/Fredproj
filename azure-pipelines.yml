
trigger:
- main
- feature/*

pool:
  vmImage: 'windows-2022'

variables:
  BuildPlatform: 'any cpu' 
  BuildConfiguration: 'release'
  CODACY_ORGANIZATION_PROVIDER : gh
  CODACY_USERNAME : badbort
  CODACY_PROJECT_NAME : Fredproj

steps:

- script: 'echo Hello, world! Bert token: $(BERT_TOKEN)'
  displayName: 'Variable Group Test.'

- script: 'echo Conditional step. Codacy detected! Codacy token: $(CODACY_PROJECT_TOKEN)'
  displayName: 'Conditional step'
  condition: variables.CODACY_PROJECT_TOKEN

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- ${{ if variables.CODACY_PROJECT_TOKEN }}:
  - script: 'echo Hello, we have a codacy project token defined!  $(CODACY_PROJECT_TOKEN)'
- ${{ else }}:
  - script: 'echo No codacy project token defined sadface. CODACY_PROJECT_TOKEN: $(CODACY_PROJECT_TOKEN)'

- ${{ if containsValue(variables.*.key, 'CODACY_PROJECT_TOKEN') }}:
  - script: 'echo We got codacy in variables'
    displayName: Variables contains codacy key

- task: UseDotNet@2
  displayName: Use .NET 6.0
  inputs:
    packageType: 'sdk'
    version: '6.0.x'
    
- task: NuGetToolInstaller@1
  displayName: 'Install Nuget'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'

- ${{ if variables.CODACY_PROJECT_NAME }}:
  - task: CmdLine@2
    displayName: '(Decorator) Run my script (injected from decorator)'
    inputs:
      script: dir

  - task: AzureKeyVault@2
    displayName: (PipelineDecorator) Codacy Vault Secrets
    inputs:
      azureSubscription: 'Azure subscription 1(bd8e250a-66a6-4038-acd8-0d6aced3e3c8)'
      KeyVaultName: 'bortington-test-vault'
      SecretsFilter: 'CODACY-API-TOKEN'
      RunAsPreJob: false

  - task: VSBuild@1
    displayName: '(PipelineDecorator) Build solution **\*.sln'
    inputs:
      msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(Build.artifactstagingdirectory)\\"'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: '(PipelineDecorator) Test and Code Coverage'
    inputs:
      command: test
      projects: '**/*Test*.csproj'
      arguments: '--configuration $(BuildConfiguration) --collect "Code coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

  - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@5
    displayName: '(PipelineDecorator) Generate Test Report'
    inputs:
      reports: '**/coverage.cobertura.xml'

  - task: Bash@3
    displayName: '(PipelineDecorator) Upload Code Coverage Report to Codacy'
    inputs:
      targetType: 'inline'
      script: 'bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coveragereport/Cobertura.xml'
    env:
      CODACY_API_TOKEN: $(CODACY-API-TOKEN)

  - ${{ else }}:
    - script: 'echo No codacy api token specified'
      displayName: (PipelineDecorator)