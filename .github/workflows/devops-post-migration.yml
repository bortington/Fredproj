# Generates a powershell script artifact that will rewire pipelines using the ado2gh tool.
# Executing this workflow does nothing other than produce an artifact. Users should download the artifact, ]
# install ado2gh, create the required PA, then finally execute the script themselves after checking the contents.
#
# See: https://rac-wa.atlassian.net/wiki/spaces/DEVX/pages/2816082081/Migrate+from+Azure+DevOps
#
# Secrets:
#   RAC2GH_AZURE_DEVOPS_PIPELINE_MIGRATION_TOKEN
#     PAT used to fetch pipeline names and service connetions.
#     This requires the following scopes: Build (Read); Code (Read); Release (Read); Service Connections (Read & query)

name: 'RAC2GH: Generate Azure Pipeline Migration Script'

on:
  workflow_dispatch:
    inputs:
      azure-project:
        description: Azure DevOps project name, e.g. WebApplications
        required: true
      azure-repo:
        description: |
          Azure DevOps repo name. e.g. FredApp
          Leave blank to generate migration scripts for all repositories in the project. Azure repo name will be used for GitHub repo name.
        required: false
      github-repo:
        description: Destination GitHub repo name, e.g. FredApp
        required: false

env:
  GITHUB_ORG: bortington
  DEVOPS_ORG: bertington
  
jobs:
  create-migration-script:
    runs-on: windows-latest
    steps:
    - name: Azure DevOps Login
      shell: pwsh
      run: |
        echo "${{secrets.RAC2GH_AZURE_DEVOPS_PIPELINE_MIGRATION_TOKEN}}" | az devops login --organization https://dev.azure.com/${{env.DEVOPS_ORG}}
        
    - name: Generate Migration Script
      shell: pwsh
      run: |
        function New-DevOpsPipelineMigrationScript 
        {
            [CmdletBinding()]
            param (
                [Parameter(Mandatory)]
                [string]$File,

                [Parameter(Mandatory)]
                [string]$AzureOrganization,

                [Parameter(Mandatory)]
                [string]$AzureProject,

                [Parameter(Mandatory)]
                [string]$AzureRepository,

                [Parameter(Mandatory)]
                [string]$GitHubOrganization,

                [Parameter(Mandatory)]
                [string]$GitHubRepository
            )

            # Ensure required env vars have been set

            $AzureOrgUrl = "https://dev.azure.com/$AzureOrganization"

            # Get the service connection ID
            [string] $serviceEndpointJson = az devops service-endpoint list --org $AzureOrgUrl --project $AzureProject --query "[?contains(@.url, 'github')]"

            $serviceEndpoints = ConvertFrom-Json $serviceEndpointJson
            $serviceEndpoint = $serviceEndpoints | Select-Object -First 1
            $serviceConnectionId = $null

            if($null -eq $serviceEndpoint)
            {
                # Throw if theres no GitHub service connection named RACWA
                throw "Could not find any suitable GitHub service connection in project $AzureProject within $AzureOrgUrl. Please ask an admin to add a GitHub service connection to your Azure Project. Ideally with the name `"racwa`"."
            }
            else 
            {
                $serviceConnectionId = $serviceEndpoint.id
                Write-Host "Using service endpoint: $($serviceEndpoint.name) with id $serviceConnectionId"
            }

            Add-Content -Path $File "# Auto generated Azure repo post-migration script for project $AzureProject within $AzureOrgUrl to GitHub project $GitHubOrganization/$GitHubRepository"
            Add-Content -Path $File "# Migrating pipelines using the service connection $($serviceEndpoint.name) ($serviceConnectionId)"
            Add-Content -Path $File "#"
            Add-Content -Path $File "# Please refer to the step by step documentation on confluence: https://rac-wa.atlassian.net/wiki/spaces/DEVX/pages/2829353121/Migrate+Azure+Pipelines"
            Add-Content -Path $File "#"
            Add-Content -Path $File "# Step 1:"
            Add-Content -Path $File "#    Confirm the service connection $($serviceEndpoint.name) is correct."
            Add-Content -Path $File "#    Confirm every ado2gh call in this file. Ensure all information is correct."
            Add-Content -Path $File "#"
            Add-Content -Path $File "# Step 2:"
            Add-Content -Path $File "#   Download the ado2gh exe available on the gh-gei GitHub project: https://github.com/github/gh-gei"
            Add-Content -Path $File "#    You can make this exe available by adding the folder to your PATH env var, or  use the Set-Alias mentioned in step 5."
            Add-Content -Path $File "#"
            Add-Content -Path $File "# Step 3:"
            Add-Content -Path $File "#    Generate the Azure personal access token with scopes: Build (Read & execute); Release (Read)"
            Add-Content -Path $File "#"
            Add-Content -Path $File "# Step 4:"
            Add-Content -Path $File "#    Open a new terminal/powershell instance. Assign the AzurePAT environment var, e.g. `$env:AzurePAT=<my_pat>"
            Add-Content -Path $File "#"
            Add-Content -Path $File "# Step 5:"
            Add-Content -Path $File "#    Skip this if you added the ado2gh folder to your PATH env"
            Add-Content -Path $File "#"
            Add-Content -Path $File "#    Run the following command to associate ado2gh to the exe you downloaded."
            Add-Content -Path $File "#    Set-Alias ado2gh `"C:\Software\ado2gh.exe`""
            Add-Content -Path $File "#"
            Add-Content -Path $File "# Step 6:"
            Add-Content -Path $File "#    Run the powershell script in your terminal/powershell instance!"
            Add-Content -Path $File ""
            Add-Content -Path $File ""
            Add-Content -Path $File "if (`$null -eq (Get-Command `"ado2gh`" -ErrorAction SilentlyContinue))"
            Add-Content -Path $File "{"
            Add-Content -Path $File "    throw `"Unable to find ado2gh`""
            Add-Content -Path $File "}"
            Add-Content -Path $File ""
            Add-Content -Path $File "if(Test-Path env:\AzurePAT)"
            Add-Content -Path $File "{"
            Add-Content -Path $File "    throw `"Please ensure the AzurePAT env var has been set`""
            Add-Content -Path $File "}"

            $pipelines = az pipelines list --organization $AzureOrgUrl --project $AzureProject --repository $AzureRepository --query "[*].{name: name, id: id, path: path}" |  ConvertFrom-Json
            Write-Host "Located $($pipelines.count) pipelines"

            foreach ($pipeline in $pipelines) {

                $pipelineUrl = "$AzureOrgUrl/$AzureProject/_build?definitionId=$($pipeline.id)"

                $pipeline.path = $pipeline.path.TrimStart("\")
                $pipeline | Add-Member -MemberType NoteProperty -Name 'fullPath' -Value $($pipeline.path +"\" + $pipeline.name)

                Write-Host "Pipeline URL: $pipelineUrl"
                Write-Host "Pipeline Full Path: $($pipeline.fullPath)"

                $migrateCommand = "ado2gh rewire-pipeline --ado-org `"$AzureOrganization`" --ado-team-project `"$AzureProject`" --ado-pipeline `"$($pipeline.fullPath)`" --github-org `"$GitHubOrganization`" --github-repo `"$GitHubRepository`" --service-connection-id `"$serviceConnectionId`" --ado-pat `$(`$env:AzurePAT) --verbose"

                Add-Content -Path $File ""
                Add-Content -Path $File "# === Pipeline $($pipeline.path). URL: $pipelineUrl"
                Add-Content -Path $File $migrateCommand
                Add-Content -Path $File ""
            }
        }

        $repoParameter = "${{inputs.azure-repo}}"

        if( $repoParameter )
        {
            $migrations = @( @{ azRepo = $repoParameter; ghRepo = "${{inputs.github-repo}}" } )
            
            if ([string]::IsNullOrEmpty("${{inputs.github-repo}}"))
            {
              throw "You must specify the GitHub repo name"
            }
        }
        else
        {
            [string] $reposList = az repos list --organization https://dev.azure.com/${{env.DEVOPS_ORG}} --project FredProj --query "[*].{azRepo: name, ghRepo: name}"
            $migrations = ConvertFrom-Json $reposList
        }        

        foreach( $migration in $migrations )
        {
            Write-Host "Creating migration script for $migration"
            New-DevOpsPipelineMigrationScript -AzureOrganization ${{env.DEVOPS_ORG}} -AzureProject ${{inputs.azure-project}} -AzureRepository $($migration.azRepo) -File ${{inputs.azure-project}}-$($migration.azRepo)-Migrate-Pipelines.ps1 -GitHubOrganization ${{env.GITHUB_ORG}} -GitHubRepository $($migration.ghRepo)
        }
        
        # New-DevOpsPipelineMigrationScript -AzureOrganization ${{env.DEVOPS_ORG}} -AzureProject ${{inputs.azure-project}} -AzureRepository ${{inputs.azure-repo}} -File ${{inputs.azure-project}}-${{inputs.azure-repo}}-Migrate-Pipelines.ps1 -GitHubOrganization ${{env.GITHUB_ORG}} -GitHubRepository ${{inputs.github-repo}}

    - name: Artifact Migration Script code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: migration-scripts
        path: '*.ps1'   
        
      # Not necessary but chucking in anyway
    - name: Azure Logout
      if: always()
      run: |
          az devops logout
          az cache purge
          az account clear
