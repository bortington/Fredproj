name: Migration from Azure DevOps

on:
  workflow_dispatch:
    inputs:
      azure-project:
        description: Azure project name. e.g. enter MRP for dev.azure.com/racwa/MRP/_git/VehiclesApi
        required: true
      azure-repo:
        description: Name of the repo in DevOps, e.g. enter VehiclesApi for dev.azure.com/racwa/MRP/_git/VehiclesApi
        required: true
      github-repo:
        description: Name of the GitHub repo, e.g. VehiclesApi
        required: true
      push-changes:
        description: 'When enabled the migration will be pushed to the github repo. When disable this will perform a dry run'
        required: true
        type: boolean

env:
  MIGRATION_BRANCH: migration
  GITHUB_ORG: bortington
  DEVOPS_ORG: bertington
  
jobs:
  clone-and-merge: # This job is run manually
    runs-on: ubuntu-latest
    steps:
      - run: |
          devopsRepo='https://${{env.DEVOPS_ORG}}@dev.azure.com/${{env.DEVOPS_ORG}}/${{ inputs.azure-project }}/_git/${{ inputs.azure-repo }}'
          
          echo "DevOps Repo: $devopsRepo"
          
          echo "SOURCE_GIT_URL=$devopsRepo" >> $GITHUB_ENV
          
      - uses: actions/checkout@v3
        with:
          repository: ${{env.GITHUB_ORG}}/${{inputs.github-repo}}
          fetch-depth: 0
          path: target
          token: ${{ secrets.MIGRATION_GITHUB_TOKEN }}
          
      - name: Check branch does not exist
        working-directory: target
        shell: bash
        run: |
          migrationExists=$(git ls-remote --heads origin migration)
          
          if [[ -z "$migrationExists" ]]; then
              echo 'Migration branch does not exist. Continuing'
          else
              echo "::error::Migration branch already exists. Please delete this branch and run the workflow again"
              exit 1
          fi
          
      - shell: bash
        run: |
      
          echo "Cloning repo..."
          git clone -c http.extraHeader="AUTHORIZATION: Basic ${{secrets.AZURE_DEVOPS_MIGRATION_PAT64}}" --mirror https://${{env.DEVOPS_ORG}}@dev.azure.com/${{env.DEVOPS_ORG}}/${{ inputs.azure-project }}/_git/${{ inputs.azure-repo }} source
         
          cd source
          
          sourceBranch=$(git branch -vv | grep -Po "^[\s\*]*\K[^\s]*(?=.*$(git branch -rl '*/HEAD' | grep -o '[^ ]\+$'))")
          echo "Source repository main branch: '$sourceBranch'"
          
          echo "SOURCE_BRANCH=$sourceBranch" >> $GITHUB_ENV
          
          git fetch --all --tags
          
          echo "Fetching lfs content"
          git lfs fetch --all
        
      - name: Merge source into target
        working-directory: target
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          
          echo "Adding source repo as new remote"
          git remote add source ../source --fetch --tags
          
          echo "Fetching lfs content from source mirror repo..."
          git lfs fetch source --all
          git checkout -b $MIGRATION_BRANCH
          
          echo "Merging source main branch into destination"
          git merge source/$SOURCE_BRANCH --allow-unrelated-histories -X theirs
                    
          git remote remove source
        
      - name: Print Diagram
        working-directory: target
        run: |
          echo "### Git Log:" >> $GITHUB_STEP_SUMMARY
          git log --all --decorate --oneline --graph --date=short --pretty="%ad - %s" >> $GITHUB_STEP_SUMMARY
    
      - name: Push Migration Changes
        working-directory: target
        if: ${{ inputs.push-changes }}
        run: |
          git push --follow-tags --set-upstream origin migration
          
      - name: Create Pull Request
        if: ${{ inputs.push-changes }}
        working-directory: target
        env:
          GITHUB_TOKEN: ${{ secrets.MIGRATION_GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "DevOps Migration from ${{inputs.azure-project}}/${{inputs.azure-repo}}" \
            --body "Automated PR from Migration Workflow" \
            --draft \
            --repo ${{env.GITHUB_ORG}}/${{inputs.github-repo}}
