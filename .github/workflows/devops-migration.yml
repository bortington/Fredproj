# This dispatched workflow merges an Azure repository into an existing GitHub repository and creates a PR.
# See: https://rac-wa.atlassian.net/wiki/spaces/DEVX/pages/2816082081/Migrate+from+Azure+DevOps
#
# Secrets:
#   RAC2GH_GITHUB_TOKEN
#     GitHub PAT required to push commits to the repo and create a new PR
#
#   RAC2GH_AZURE_DEVOPS_TOKEN
#     The PAT used to clone the repo from devops. This needs Code(Read)

name: 'RAC2GH: Migrate repo from Azure DevOps'

on:
  workflow_dispatch:
    inputs:
      azure-project:
        description: Azure project name. e.g. enter MRP for dev.azure.com/racwa/MRP/_git/VehiclesApi
        required: true
      azure-repo:
        description: Name of the repo in DevOps, e.g. enter VehiclesApi for dev.azure.com/racwa/MRP/_git/VehiclesApi
        required: true
      github-repo:
        description: Name of the GitHub repo, e.g. VehiclesApi
        required: true
      push-branches:
        description: Migrate all branches? When false only the default branch is migrated.
        required: true
        type: boolean
      push-changes:
        description: Confirm. (Leaving this unticked will perform a dry run)
        required: true
        type: boolean

# Limit concurrency to 1 per git repo
concurrency: rac2gh_${{inputs.github-repo}}

env:
  MIGRATION_BRANCH: migration
  GITHUB_ORG: bortington
  DEVOPS_ORG: bertington

jobs:
  clone-and-merge: # This job is run manually
    runs-on: ubuntu-latest
    steps:
      - run: |
      
          devopsRepo='https://${{env.DEVOPS_ORG}}@dev.azure.com/${{env.DEVOPS_ORG}}/${{ inputs.azure-project }}/_git/${{ inputs.azure-repo }}'
          authValue=`printf "pat:${{secrets.RAC2GH_AZURE_DEVOPS_TOKEN}}" | iconv -f ASCII -t UTF-8 | base64`

          echo "::add-mask::$authValue"

          echo "DevOps Repo: $devopsRepo"
          echo "SOURCE_GIT_URL=$devopsRepo" >> $GITHUB_ENV
          echo "SOURCE_AUTH_B64PAT=$authValue" >> $GITHUB_ENV
          
      - uses: actions/checkout@v3
        with:
          repository: ${{env.GITHUB_ORG}}/${{inputs.github-repo}}
          fetch-depth: 0
          path: target
          token: ${{ secrets.RAC2GH_GITHUB_TOKEN }}
          
      - name: Check branch does not exist
        working-directory: target
        shell: bash
        run: |
          migrationExists=$(git ls-remote --heads origin $MIGRATION_BRANCH)
          
          if [[ -z "$migrationExists" ]]; then
              echo 'Migration branch does not exist. Continuing'
          else
              echo "::error::Migration branch already exists. Please delete this branch and run the workflow again"
              exit 1
          fi
          
      - shell: bash
        run: |
      
          echo "Cloning repo..."
          git clone -c http.extraHeader="AUTHORIZATION: Basic ${{env.SOURCE_AUTH_B64PAT}}" --mirror https://${{env.DEVOPS_ORG}}@dev.azure.com/${{env.DEVOPS_ORG}}/${{ inputs.azure-project }}/_git/${{ inputs.azure-repo }} source
         
          cd source
          git --version
          git remote show origin
          sourceBranch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          echo "Source repository main branch: $sourceBranch"
          
          # Throw if default branch was most definitely incorrect
          if [ "$sourceBranch" == "master" ] || [ "$sourceBranch" == "main" ]; then
              echo "SOURCE_BRANCH=$sourceBranch" >> $GITHUB_ENV
              echo "Set SOURCE_BRANCH env var to $sourceBranch"
          else
              echo "::error::Failed to detect default branch from source repo. Got: $sourceBranch"
              exit 1
          fi
          
          git fetch --all --tags
          
          echo "Fetching lfs content"
          git lfs fetch --all
        
      - name: Merge source into target
        working-directory: target
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          
          echo "Adding source repo as new remote"
          git remote add source ../source --fetch --tags
          
          echo "Fetching lfs content from source mirror repo..."
          git lfs fetch source --all
          git checkout -b $MIGRATION_BRANCH
          
          echo "Merging source main branch into destination"
          git merge source/$SOURCE_BRANCH --allow-unrelated-histories -X theirs

          echo "Push branches: '${{inputs.push-branches}}'"

          # Checkout all branch from source remote, excluding the main branch
          if [ "${{inputs.push-branches}}" == "true" ]
          then
            echo "Checking out all branches from source repo"
            
            for remote in `git branch -r | grep source/ | grep -v $SOURCE_BRANCH | grep -oP 'source/\K.*'`
            do 
              git checkout $remote
              echo "Checked out $remote"
            done
          fi

          git remote remove source
          
          # Checkout migration branch again for PR step later on
          git checkout $MIGRATION_BRANCH
        
      - name: Print Diagram
        working-directory: target
        run: |
          echo "### Git Log:" >> $GITHUB_STEP_SUMMARY
          git log --all --decorate --oneline --graph --date=short --pretty="%ad - %s" >> $GITHUB_STEP_SUMMARY
    
      - name: Push Migration Changes
        working-directory: target
        if: ${{ inputs.push-changes }}
        run: |
          git push --tags --set-upstream origin $MIGRATION_BRANCH
          git push --all origin
          
      - name: Create Pull Request
        if: ${{ inputs.push-changes }}
        working-directory: target
        env:
          GITHUB_TOKEN: ${{ secrets.RAC2GH_GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "DevOps Migration from ${{inputs.azure-project}}/${{inputs.azure-repo}}" \
            --body "Automated PR from Migration Workflow" \
            --draft \
            --repo ${{env.GITHUB_ORG}}/${{inputs.github-repo}}
            
      - name: "Set Env Variables for Codacy"
        shell: bash
        if: ${{ inputs.push-changes }}
        run: |
          echo "CODACY_ORGANIZATION_PROVIDER=$(if [[ $GITHUB_SERVER_URL == "https://github.com" ]]; then echo "gh"; else echo "ghe"; fi)" >> $GITHUB_ENV
          echo "CODACY_USERNAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          
          repoName="${{inputs.github-repo}}"
          echo "CODACY_PROJECT_NAME=${repoName^}" >> $GITHUB_ENV
          
      - name: Create Codacy Project if necessary
        shell: pwsh
        if: ${{ inputs.push-changes }}
        run: |
          # Add the repo to Codacy
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("api-token", "${{ secrets.CODACY_API_TOKEN }}")
          $headers.Add("caller", "string")
          $headers.Add("Content-Type", "application/json")

          $body = @{
            repositoryFullPath = "$env:CODACY_USERNAME/$env:CODACY_PROJECT_NAME"
            provider = $env:CODACY_ORGANIZATION_PROVIDER
          } | ConvertTo-Json
          Write-Host "Sending request with body: $body"
          try {
            $response = Invoke-RestMethod 'https://app.codacy.com/api/v3/repositories' -Method 'POST' -Headers $headers -Body $body -SkipHttpErrorCheck
          } catch [System.Net.WebException] {
            Write-Host "An exception was caught: $($_.Exception.Message)"
          }
          $statusCodeInt = [int]$response.BaseResponse.StatusCode
          Write-Host Response: $statusCodeInt
          Write-Host $response

          # Set default PR checks to something soemwhat flexible for migration - forcing any security issues to be addressed and only critical non-security issues
          $body = @{ 
            issueThreshold = @{
              threshold = 0
              minimumSeverity = "Error"
            }
          }

          $response = Invoke-RestMethod "https://app.codacy.com/api/v3/organizations/${{env.CODACY_ORGANIZATION_PROVIDER}}/${{env.CODACY_USERNAME}}/repositories/${{env.CODACY_PROJECT_NAME}}/settings/quality/pull-requests" -Method 'PUT' -Headers $headers
          Write-Host Response: $statusCodeInt
          Write-Host $response

      - name: Generate Codacy Project Token
        if: ${{ inputs.push-changes }}
        shell: pwsh
        run: |
          $projectName = "${{env.CODACY_PROJECT_NAME}}".Split('/')[-1]
          $projectName = $projectName.ToLower()
          $uri = "https://app.codacy.com/api/v3/organizations/${{env.CODACY_ORGANIZATION_PROVIDER}}/${{env.CODACY_ORGANIZATION_PROVIDER}}/repositories/$projectName/tokens"

          Write-Host "Generating a Codacy Project API Token for repository"

          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("api-token", "${{ secrets.CODACY_API_TOKEN }}")
          $headers.Add("caller", "string")
          $headers.Add("Content-Type", "application/json")
          Write-Host "Sending request"
          try {
            $response = Invoke-RestMethod -Uri $uri -Method 'POST' -Headers $headers -SkipHttpErrorCheck
            Write-Host $response

            if($response.PSobject.Properties.Name -contains "error")
            {
              throw $response
            }

          } catch [System.Net.WebException] {
            Write-Host "An exception was caught: $($_.Exception.Message)"
            throw
          }
