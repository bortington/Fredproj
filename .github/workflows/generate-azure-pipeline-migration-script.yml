# Generates a powershell script artifact that will rewire pipelines to point a different repository.
# Executing this workflow does nothing other than produce a .ps1 artifact. Users should download the artifact,
# install jq, create the required PA, then finally execute the script themselves after checking the contents.
#
# See: https://rac-wa.atlassian.net/wiki/spaces/DEVX/pages/2816082081/Migrate+from+Azure+DevOps
#
# Secrets:
#   RAC2GH_AZURE_DEVOPS_PIPELINE_MIGRATION_TOKEN
#     PAT used to fetch pipeline names and service connetions.
#     This requires the following scopes: Build (Read); Code (Read); Release (Read); Service Connections (Read & query)

name: 'RAC2GH: Generate Azure Pipeline Rewiring Script'

on:
  workflow_dispatch:
    inputs:
      azure-project:
        description: Azure DevOps project name, e.g. WebApplications
        required: true
      azure-repo:
        description: |
          Azure DevOps repo name. e.g. FredApp
        required: false
      bitbucket-repo:
        description: |
          Bitbucket repo name. e.g. Enter bertproj for racwa/bertproj
        required: false
      github-repo:
        description: Destination GitHub repo name, e.g. FredApp
        required: false
      service-connection:
        description: |
          Optional service connection name if a specific one must be used
        required: false

env:
  GITHUB_ORG: bortington
  DEVOPS_ORG: bertington
  BITBUCKET_WORKSPACE: aleksstuff
  
jobs:
  create-migration-script:
    runs-on: windows-latest
    steps:
    - name: Azure DevOps Login
      shell: pwsh
      run: |
        echo "${{secrets.RAC2GH_AZURE_DEVOPS_PIPELINE_MIGRATION_TOKEN}}" | az devops login --organization https://dev.azure.com/${{env.DEVOPS_ORG}}
      
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: scripts
        
    - name: Generate Migration Script
      shell: pwsh
      run: |
        Import-Module -Name ".\scripts\RAC2GH\rewire-repo-pipelines.psm1" -Force

        if(-not [string]::IsNullOrWhiteSpace("${{inputs.azure-repo}}"))
        {
          $migrations = @( @{ 
            azRepo = "${{inputs.azure-repo}}"
            ghRepo = "${{inputs.github-repo}}"
            fileName = "${{inputs.azure-project}}-${{inputs.azure-repo}}-Rewire-Pipelines.ps1"
          } )          
        }
        elseif(-not [string]::IsNullOrWhiteSpace("${{inputs.bitbucket-repo}}"))
        {
          $migrations = @( @{ 
            bbRepo = "${{inputs.bitbucket-repo}}"
            ghRepo = "${{inputs.github-repo}}"
            fileName = "${{inputs.azure-project}}-${{inputs.bitbucket-repo}}-Rewire-Pipelines.ps1"
          } )          
        }
        else
        {
          # If neither bitbucket or az repo was specified then we generate scripts for all repos in the project
          [string] $reposList = az repos list --organization https://dev.azure.com/${{env.DEVOPS_ORG}} --project "${{inputs.azure-project}}" --query "[*].{azRepo: name, ghRepo: name}"
          $migrations = ConvertFrom-Json $reposList
        }

        Write-Host $migrations
        New-Item -Path .\ScriptOutput -ItemType Directory -Force
        
        foreach( $migration in $migrations )
        {
          Write-Host "Creating migration script for $migration"
          
          # Todo: Would be nice to retrieve default branch but for now we assume its main
          $callArgs = @{
            TargetFile = "ScriptOutput\$($migration.fileName)"
            AzureOrganization = "${{env.DEVOPS_ORG}}"
            AzureProject = "${{inputs.azure-project}}"
            AzureRepo = "$($migration.azRepo)"
            BitbucketWorkspace = "${{env.BITBUCKET_WORKSPACE}}"
            BitbucketRepo = "$($migration.bbRepo)"
            ServiceConnectionName = "${{inputs.service-connection}}"
            GitHubOrganization = "${{env.GITHUB_ORG}}"
            GitHubRepository = "$($migration.ghRepo)"
            DefaultBranch = "main"
          }
          
          CreateRepoPipelineRewireScript @callArgs
        }
        
    - name: Artifact Migration Script code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: migration-scripts
        path: 'ScriptOutput\*.ps1'   
        
      # Not necessary but chucking in anyway
    - name: Azure Logout
      if: always()
      run: |
          az devops logout
          az cache purge
          az account clear